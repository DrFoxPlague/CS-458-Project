# SCALARS AND INPUTS
# ------
scalar Date
scalar Media

input ExhibitContentInput {
    title: String
    body: String
    media: Media
}

input QuestionInput {
    question: String
    choices: [String]
    answer: String
}

input GameDataInput {
    name: String
    subject: String
}

input UserInput {
    grade: String
    dob: Date
}
# ------

# User Schemas
type User {
    token: String
    id: String!
    name: String!
    email: String!
    grade: String
    dob: Date
    badges: [Badge]!
    isStaff: Boolean!
    profilePicture: String!
}

#type Staff {
#    id: String!
#    name: String!
#    email: String!
#    phone_num: String!
#}

# Badge Schemas
type Badge {
    id: String!
     name: String!
     description: String!
     image: String!
     category: String!
    type: String!
}

# Exhibit Schemas
type ExhibitContent {
    title: String
    body: String
    image: String
    audio: String
    video: String
}

type Exhibit {
    id: String!
    name: String!
    content: ExhibitContent!
    game: Game!
}

# Game Schemas - NEEDS TO BE EXPANDED!!!
type Game {
    id: String!
    name: String!
    subject: String!
    questions: [Question]!
}

type TriviaQuestion {
    id: String!
    question: String!
    choices: [String]!
    answer: String!
}

union Question = TriviaQuestion # use pipe operator to extend different question types
type Query {
    # User Queries
    getUser(id: String!): User!
    getUsers: [User]!

    # Staff Queries
    # getStaff(id: String!): Staff!
    # getStaffMembers: [Staff]!

    # Badge Queries
    getBadge(id: String!): Badge!
    getBadges: [Badge]!

    # Exhibit Queries
    getExhibit(id: String!): Exhibit!
    getExhibits: [Exhibit]!

    # Game Queries
    getGame(id: String!): Game!
    getGames: [Game]!
}

type Mutation {
    # User Mutations
    generateGoogleAuthURL: String!
    login(code: String!): User!

    createOrUpdateUser(input: UserInput): User!

    deleteUser(id: String!): User!

    #updateUser(
    #    id: String!,
    #    name: String,
    #    email: String,
    #    grade: String,
    #   dob: Date
    #): User!

    # Staff Mutations
    #createStaff(
    #    name: String!,
    #    email: String!,
    #    phone_num: String!
    #): Staff!

    #deleteStaff(id: String!): Staff!

    #updateStaff(
    #    id: String!,
    #    name: String,
    #    email: String,
    #    phone_num: String
    #): Staff!

    # Badge Mutations
    createBadge(name: String!, description: String!,  type: String!): Badge!

    deleteBadge(id: String!): Badge!

    updateBadge(id: String!, name: String, description: String, type: String): Badge!

    # Exhibit Mutations
    createExhibit(name: String!, content: ExhibitContentInput!): Exhibit!

    deleteExhibit(id: String!): Exhibit!

    updateExhibit(
        id: String!
        ex_name: String
        content: ExhibitContentInput
    ): Exhibit!

    # Game Mutations
    createGame(input: GameDataInput!): Game!

    deleteGame(id: String!): Game!

    updateGame(id: String!, input: GameDataInput!): Game!

    createTrivQues(input: QuestionInput!): TriviaQuestion!

    deleteTrivQues(id: String!): TriviaQuestion!

    updateTrivQues(id: String!, input: QuestionInput): TriviaQuestion!

    addQuestion(gameId: String!, question: String!): Game!

    removeQuestion(gameId: String!, question: String!): Game!
}

# TO-DO:
#   - expand game schemas to accomodate different game types
